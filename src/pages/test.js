import Head from "next/head";
import Image from "next/image";
import { Inter, Play } from "next/font/google";
import styles from "@/styles/Home.module.css";
import Keyboard from "../../components/keyboard";
import App from "../../components/UIElements/key";
import Synth from "../../classes/Synth";
import { useState, useEffect, useRef } from "react";
import Player from "../../classes/Player";
const inter = Inter({ subsets: ["latin"] });
import { useAudioContext } from "../../providers/AudioContextContext";
import NOTES from "../../data/notes";
import SynthPlayer from "../../components/instruments/SynthPlayer";

export default function Home() {
  const [tracks, setTracks] = useState([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [counter, setCounter] = useState(0);

  let tempo = 120.0;
  const audioContext = useAudioContext();

  /////////////
  //////////////////
  useEffect(() => {}, [counter]);

  const player = new Player(audioContext);

  // Expose frequency & frequency modulation

  const lookahead = 25.0; // How frequently to call scheduling function (in milliseconds)
  const scheduleAheadTime = 0.1; // How far ahead to schedule audio (sec)

  let currentNote = 0; // The note we are currently playing
  let nextNoteTime = 0.0; // when the next note is due.
  function nextNote() {
    const secondsPerBeat = 60.0 / tempo;

    nextNoteTime += secondsPerBeat; // Add beat length to last beat time

    // Advance the beat number, wrap to zero when reaching 4
    currentNote = (currentNote + 1) % 12;
    setCounter(currentNote);
  }
  let keyEvents = [
    [{ type: "noteOn", note: "C-3" }],
    [
      { type: "noteOn", note: "F-3" },
      { type: "noteOff", note: "C-3" },
    ],
    [
      { type: "noteOn", note: "G-3" },
      { type: "noteOff", note: "F-3" },
    ],
    [{ type: "noteOff", note: "G-3" }],
  ];

  const masterSchedule = [
    keyEvents,
    null,
    null,
    null,
    keyEvents,
    null,
    null,
    null,
    keyEvents,
    null,
    null,
    null,
  ];

  const eventQueue = [[], [], [], [], [], [], [], [], [], [], [], []];

  const mapEvents = (masterEvents, currBeat) => {
    masterEvents.forEach((events, index) => {
      if (events) {
        events.forEach((event) => {
          eventQueue.at(currBeat + index).push(event);
        });
      }
    });
  };

  function scheduleNote(beatNumber, time) {
    //Add new loops to the queue
    if (masterSchedule[beatNumber]) {
      mapEvents(masterSchedule[beatNumber], beatNumber);
    }

    if (eventQueue[beatNumber].length > 0) {
      console.log("BEAT: ", beatNumber);

      eventQueue[beatNumber].forEach((e) => {
        console.log("Playing ", e);
        player.handleEvent(e, time);
      });
      eventQueue[beatNumber] = [];
    }

    //play events in the queue

    // if (keyEvents[beatNumber] && keyEvents[beatNumber].length > 0) {
    //   keyEvents[beatNumber].forEach((event) => {
    //     player.handleEvent(event, time);
    //   });
    // }
  }

  let timerID;
  function scheduler() {
    while (nextNoteTime < audioContext.currentTime + scheduleAheadTime) {
      scheduleNote(currentNote, nextNoteTime);

      nextNote();
    }
    timerID = setTimeout(scheduler, lookahead);
  }

  const handleSinglePlay = () => {
    player.noteOn("C-3", audioContext.currentTime);
    player.noteOn("F-3", audioContext.currentTime);
  };

  const handleSingleStop = () => {
    player.noteOff("C-3", audioContext.currentTime);
  };
  const handleSingleStopF = () => {
    player.noteOff("F-3", audioContext.currentTime);
  };
  const handlePlay = () => {
    if (!isPlaying) {
      // Start playing
      // Check if context is in suspended state (autoplay policy)
      if (audioContext.state === "suspended") {
        audioContext.resume();
      }

      currentNote = 0;
      nextNoteTime = audioContext.currentTime;
      scheduler(); // kick off scheduling
    } else {
      window.clearTimeout(timerID);
    }
    setIsPlaying(!isPlaying);
  };

  const handleStop = () => {
    setIsPlaying(false);
    window.clearTimeout(timerID);
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main}`}>
        <div className="flex flex-row w-100 ml-1 justify-center t-b">
          <button onClick={handlePlay}>Play All</button>
          <button onClick={handleStop}>STOP</button>
          <button onClick={handleSinglePlay}>Single Play</button>
          <button onClick={handleSingleStop}>Single Stop</button>
          <button onClick={handleSingleStopF}>Single Stop F</button>
          <p>{counter}</p>
          {isPlaying ? <p>PLAYING</p> : ""}{" "}
        </div>
        <div className="w-100 t-b relative">
          <SynthPlayer />
        </div>

        {/* <Keyboard /> */}
      </main>
    </>
  );
}
